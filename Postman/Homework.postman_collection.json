{
	"info": {
		"_postman_id": "d80caf4e-dc6b-42ff-884d-e50718264382",
		"name": "31 GR (HW-2)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21654200"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Проверить, что в body приходит правильный string.\r",
							"var expectedResult = \"This is the first responce from server!ss\";\r",
							"var responseData = pm.response.text();\r",
							"console.log(responseData);\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.expect(responseData).to.eql(expectedResult);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Home work\r",
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name-1\", function() {\r",
							"pm.expect(responseData.name).to.eql(\"Vika\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age-1\", function() {\r",
							"pm.expect(responseData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary-1\", function() {\r",
							"let actualResult = +responseData.salary \r",
							"pm.expect(actualResult).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var requestData = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name-2\", function() {\r",
							"pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age-2\", function() {\r",
							"pm.expect(responseData.age).to.eql(requestData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary-2\", function() {\r",
							"let resSalary = +responseData.salary\r",
							"let reqSalary = +requestData.salary\r",
							"pm.expect(resSalary).to.eql(reqSalary);\r",
							"});\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function() {\r",
							"let reqSalary = +requestData.salary;\r",
							"let res_u_salary_1_5_year = +responseData.family.u_salary_1_5_year;\r",
							"pm.expect(res_u_salary_1_5_year).to.eql(reqSalary * 4);\r",
							"});\r",
							"\r",
							"\r",
							"// \r",
							"\r",
							"\r",
							"// Lesson (30.09.2022)\r",
							"// \r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// var jsonData = pm.response.json();\r",
							"// let req = request.data;\r",
							"// let reqSalary = +req.salary;\r",
							"// //console.log(typeof reqSalary1_5Year)\r",
							"\r",
							"\r",
							"// pm.test(\"salary\", function () {    \r",
							"//     pm.expect(jsonData.salary).to.eql(reqSalary);\r",
							"// });\r",
							"\r",
							"// pm.test(\"u_salary_1_5_year\", function () {    \r",
							"//     pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary * 4);\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Home work\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(responseData.age).to.eql(requestData.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary\", function(){\r",
							"    pm.expect(+responseData.salary).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog's name-1\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog's age-1\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name-2\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age-2\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Pavel&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Home work\r",
							"//3. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(+responseData.age).to.eql(+requestData.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestData.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(responseData.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Element 0\", function(){\r",
							"    pm.expect(+responseData.salary[0]).to.eql(+requestData.salary);\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Element 1\", function(){\r",
							"    pm.expect(+responseData.salary[1]).to.eql(2 * +requestData.salary);\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Element 2\", function(){\r",
							"    pm.expect(+responseData.salary[2]).to.eql(3 * +requestData.salary);\r",
							"})\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", responseData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", responseData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", responseData.salary[0]);\r",
							"\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < 3; i++){\r",
							"    console.log(+responseData.salary[i]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Kira&age=30&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kira"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Home work\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var requestData = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Have start_qa_salary\", function () {\r",
							"     pm.expect(responseData).to.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData).to.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData).to.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseData).to.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseData).to.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Have person\", function () {\r",
							"    pm.expect(responseData).to.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"requestData.salary = start_qa_salary\", function () {\r",
							"    pm.expect(+requestData.salary).to.eql(+responseData.start_qa_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"requestData.salary*2 = qa_salary_after_6_months\", function () {\r",
							"    pm.expect(+requestData.salary * 2).to.eql(+responseData.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"requestData.salary*2.7 = qa_salary_after_12_months\", function () {\r",
							"    pm.expect(+requestData.salary * 2.7).to.eql(+responseData.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"requestData.salary*3.3 = qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(+requestData.salary * 3.3).to.eql(+responseData[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"requestData.salary*3.3 = qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(+requestData.salary * 3.8).to.eql(+responseData[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"responseData.person.u_name[1] = requestData.salary\", function () {\r",
							"    pm.expect(+responseData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"responseData.person.u_name[1] = requestData.salary\", function () {\r",
							"    pm.expect(+responseData.person.u_age).to.eql(+requestData.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"responseData.person.u_name[1] = requestData.salary\", function () {\r",
							"    pm.expect(+responseData.person.u_salary_5_years).to.eql(+requestData.salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let totalElements  = Object.keys(responseData.person).length;\r",
							"let personData = Object.keys(responseData.person);\r",
							"for (let i = 0; i < totalElements; ++i) {\r",
							"    console.log(personData[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		}
	]
}